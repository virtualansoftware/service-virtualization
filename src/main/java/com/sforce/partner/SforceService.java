package com.sforce.partner;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * Sforce SOAP API
 *
 * This class was generated by Apache CXF 3.3.7
 * 2020-09-21T07:44:16.998-05:00
 * Generated source version: 3.3.7
 *
 */
@WebServiceClient(name = "SforceService",
                  wsdlLocation = "file:/D:/Elan/virtualan-working-dir/service-vir/virtualan/samples/virtualan-wsdl-soap/src/main/resources/META-INF/resources/wsdl/Salesforce-49/partner.wsdl",
                  targetNamespace = "urn:partner.soap.sforce.com")
public class SforceService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("urn:partner.soap.sforce.com", "SforceService");
    public final static QName Soap = new QName("urn:partner.soap.sforce.com", "Soap");
    static {
        URL url = null;
        try {
            url = new URL("file:/D:/Elan/virtualan-working-dir/service-vir/virtualan/samples/virtualan-wsdl-soap/src/main/resources/META-INF/resources/wsdl/Salesforce-49/partner.wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(SforceService.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "file:/D:/Elan/virtualan-working-dir/service-vir/virtualan/samples/virtualan-wsdl-soap/src/main/resources/META-INF/resources/wsdl/Salesforce-49/partner.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public SforceService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public SforceService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public SforceService() {
        super(WSDL_LOCATION, SERVICE);
    }

    public SforceService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public SforceService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public SforceService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }




    /**
     *
     * @return
     *     returns Soap
     */
    @WebEndpoint(name = "Soap")
    public Soap getSoap() {
        return super.getPort(Soap, Soap.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns Soap
     */
    @WebEndpoint(name = "Soap")
    public Soap getSoap(WebServiceFeature... features) {
        return super.getPort(Soap, Soap.class, features);
    }

}
